<!--
    == $Id$
    ==
    == Licensed to Julian Hyde under one or more contributor license
    == agreements. See the NOTICE file distributed with this work for
    == additional information regarding copyright ownership.
    ==
    == Julian Hyde licenses this file to you under the Apache License,
    == Version 2.0 (the "License"); you may not use this file except in
    == compliance with the License. You may obtain a copy of the License at:
    ==
    == http://www.apache.org/licenses/LICENSE-2.0
    ==
    == Unless required by applicable law or agreed to in writing, software
    == distributed under the License is distributed on an "AS IS" BASIS,
    == WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    == See the License for the specific language governing permissions and
    == limitations under the License.
    -->
<project name="olap4j" basedir="." default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">
    <property file="${basedir}/test.properties"/>
    <property name="unix.script" value="${basedir}/buildOnJdk.sh"/>
    <import file="subfloor.xml" />

    <property name="ivy.artifact.ivyfilename.xmla"
            value="ivy-xmla-publish-local.xml"
            description="The name of the IVY-XMLA xml file to deploy with the artifact" />

    <property name="ivy.artifact.ivyfilename.tck"
            value="ivy-tck-publish-local.xml"
            description="The name of the IVY-TCK xml file to deploy with the artifact" />

    <property name="jar-jdk14.file"
        value="${dist.dir}/${ivy.artifact.id}-jdk14-${project.revision}.jar" />

    <property name="classes-jdk14.dir"
                value="${bin.dir}/classes-jdk14" />

    <property name="dist.doc.file" value="${dist.dir}/doc.tar.gz" />

    <!-- Files that used to be generated. We continue to remove them, just in
         case someone is running on an old sandbox. -->
    <property name="old.generated.java.files"
        value="
src/org/olap4j/mdx/parser/impl/DefaultMdxParser.java,
src/org/olap4j/mdx/parser/impl/DefaultMdxParserSym.java" />

    <property name="generated.java.files"
        value="
src/org/olap4j/mdx/parser/impl/MdxParserImpl.java,
src/org/olap4j/mdx/parser/impl/MdxParserImplTokenManager.java,
src/org/olap4j/mdx/parser/impl/ParseException.java,
src/org/olap4j/mdx/parser/impl/SimpleCharStream.java,
src/org/olap4j/mdx/parser/impl/Token.java,
src/org/olap4j/mdx/parser/impl/TokenMgrError.java,
src/org/olap4j/driver/xmla/XmlaOlap4jDriverVersion.java" />

    <target name="checkIsJdk15" if="jdk15.not.present">
        <!--<fail message="The 'dist' target (used to make an official release) must be run under JDK 1.5." />-->
    </target>

    <condition property="jdk15.present">
        <contains string="${java.version}" substring="1.5." />
    </condition>

    <condition property="jdk15.not.present">
        <not>
          <contains string="${java.version}" substring="1.5." />
        </not>
    </condition>

    <condition property="jdk16.present">
        <contains string="${java.version}" substring="1.6." />
    </condition>

    <condition property="jdk16.not.present">
        <not>
          <contains string="${java.version}" substring="1.6." />
        </not>
    </condition>

    <condition property="jdk17.present">
        <contains string="${java.version}" substring="1.7." />
    </condition>

    <condition property="jdk17.not.present">
        <not>
           <contains string="${java.version}" substring="1.7." />
        </not>
    </condition>

    <condition property="java.version.matches.requested">
      <or>
        <not>
          <isset property="requested.java.version"/>
        </not>
        <matches pattern="^${requested.java.version}.*" string="jdk${java.runtime.version}" />
      </or>
    </condition>

    <target name="setup" depends="version-properties,compile,create-dot-classpath"
        description="Setups the project for eclipse." />

    <target name="hudson" depends="clean-all,clean-tests,version-properties,jar,source.jar,tck-jar,xmla-jar,test,jar-jdk14"
        description="Sugar goal to build olap4j from hudson." />

    <target name="hudson-notest" depends="clean-all,clean-tests,version-properties,jar,source.jar,tck-jar,xmla-jar,jar-jdk14"
            description="Sugar goal to build olap4j from hudson." />

    <target name="clean" depends="subfloor.clean, clean-generated"/>

    <target name="clean-generated">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="." includes="${generated.java.files},${old.generated.java.files},VERSION.txt"/>
        </delete>
    </target>

    <!-- Override to create a proper release. -->
    <target name="dist" depends="checkIsJdk15, all"/>

    <target name="all"
        depends="clean,version-properties,jar,tck-jar,xmla-jar,javadoc,javadoc-pdf,jar-jdk14,source.zip"
        description="Creates a distribution">
        <zip zipfile="${dist.dir}/${zip.filename}">
            <zipfileset dir="${basedir}" prefix="${ivy.artifact.id}-${project.revision}"
                includes="
LICENSE,
NOTICE,
README.txt,
CHANGES.txt,
VERSION.txt" />
            <zipfileset dir="${basedir}/doc" prefix="${ivy.artifact.id}-${project.revision}/doc"
                includes="**/*" />
            <zipfileset dir="${javadoc.dir}" prefix="${ivy.artifact.id}-${project.revision}/doc/api"
                includes="**/*" />
            <zipfileset dir="${dist.dir}" prefix="${ivy.artifact.id}-${project.revision}/lib" includes="olap4j-*.jar" />
            <zipfileset dir="${lib.dir}" prefix="${ivy.artifact.id}-${project.revision}/lib" includes="*.jar" />
            <zipfileset dir="${dist.dir}" prefix="${ivy.artifact.id}-${project.revision}" includes="${source.zip.filename}" />
        </zip>
    </target>

    <target name="doczip" depends="clean-all,clean-tests,compile,compile-tests,version-properties,javadoc,javadoc-pdf,javadoc-with-ydoc"
        description="Creates an archive of all docs to deploy on www.olap4j.org.
                     See also doc/deployDoc.sh.">
        <mkdir dir="${dist.dir}" />
        <tar destfile="${dist.doc.file}" compression="gzip">
            <tarfileset dir="${basedir}/doc" prefix="doc" includes="
**/*.html,
**/*.pdf,
**/*.png,
**/*.css,
**/*.xml,
olap4j_api.pdf"
                excludes="
**/*~,
**/_vti*/*,
**/*.sh"/>
            <tarfileset dir="${javadoc.dir}" prefix="doc/api"
                includes="**/*" />
        </tar>
    </target>

    <target name="compile"
        depends="init, compile.pre, compileJdk15, compileJdk16, compileJdk17, compile.src_copy, compile.res_copy, compile.lic_copy, compile.post"
        description="Performs all the steps to prepare the bin directory with a complete compilation" />

    <target name="jar" depends="init, compile.pre, compileJdk15, compileJdk16, compileJdk17, compile, compile-tests, set-build.id, generate.manifest"
        description="Jars up the bin directory after a compile">
        <zip destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar">
            <zipfileset dir="${basedir}" prefix=""
                includes="
LICENSE,
NOTICE,
README.txt,
VERSION.txt" />
            <zipfileset dir="${classes.dir}" prefix=""
                includes="**/*"
                excludes="
org/olap4j/driver/**,
META-INF/**"/>
        </zip>
    </target>

    <target name="xmla-jar" depends="jar"
        description="Jars up the bin directory after a compile">
        <zip destfile="${dist.dir}/${ivy.artifact.id}-xmla-${project.revision}.jar">
            <zipfileset dir="${basedir}" prefix=""
                includes="
LICENSE,
NOTICE,
README.txt,
VERSION.txt" />
            <zipfileset dir="${classes.dir}" prefix=""
                includes="
org/olap4j/driver/**,
META-INF/**"/>
        </zip>
    </target>

    <target name="tck-jar" depends="jar"
        description="Jars up the Test Compatibility Kit (TCK) after a compile">
        <zip destfile="${dist.dir}/${ivy.artifact.id}-tck-${project.revision}.jar">
            <zipfileset dir="${basedir}" prefix=""
                includes="
LICENSE,
NOTICE,
README.txt,
VERSION.txt" />
            <zipfileset dir="${testclasses.dir}" prefix="" includes="**/*"
                excludes="jndi.properties" />
        </zip>
    </target>

    <target name="compileJdk15">
        <exec osfamily="unix" executable="${unix.script}">
            <arg line="jdk1.5 -Dskip.download=true compile.compile"/>
        </exec>
        <exec osfamily="windows" dir="." executable="cmd">
            <arg line="/c .\buildOnJdk.bat jdk1.5 -Dskip.download=true compile.compile"/>
        </exec>
    </target>

    <target name="compileJdk16">
        <exec osfamily="unix" executable="${unix.script}">
            <arg line="jdk1.6 -Dskip.download=true compile.compile"/>
        </exec>
        <exec osfamily="windows" dir="." executable="cmd">
            <arg line="/c .\buildOnJdk.bat jdk1.6 -Dskip.download=true compile.compile"/>
        </exec>
    </target>

    <target name="compileJdk17">
        <exec osfamily="unix" executable="${unix.script}">
            <arg line="jdk1.7 -Dskip.download=true compile.compile"/>
        </exec>
        <exec osfamily="windows" dir="." executable="cmd">
            <arg line="/c .\buildOnJdk.bat jdk1.7 -Dskip.download=true compile.compile"/>
        </exec>
    </target>

    <target name="source.zip">
        <zip zipfile="${dist.dir}/${source.zip.filename}">
            <zipfileset dir="${basedir}" prefix="${ivy.artifact.id}-${project.revision}"
                    includes="
LICENSE,
NOTICE,
README.txt,
CHANGES.txt,
VERSION.txt" />
            <zipfileset dir="${basedir}" prefix="${ivy.artifact.id}-${project.revision}"
                    includes="
src/**,
testsrc/**,
foodmart/*.zip,
foodmart/*.xml,
simple-jndi/**,
xmla-cache/**,
.settings/**
.classpath,
.project,
build.properties,
build.xml,
buildOnJdk.bat,
buildOnJdk.sh,
checkFile.sh,
checkFile.awk,
ivy.xml,
ivy-xmla.xml,
ivy-tck.xml,
ivy-jdk14.xml,
ivysettings.xml,
subfloor.xml,
test.properties" />
        </zip>
    </target>

    <target name="version-properties">
        <echo message="olap4j ${project.revision}${line.separator}" file="VERSION.txt" />
        <echo file="${src.dir}/org/olap4j/driver/xmla/XmlaOlap4jDriverVersion.java">/*
 * Project version information. Generated - do not modify.
 */
package org.olap4j.driver.xmla;
/**
  * Version information for the XMLA driver. (Generated.)
  */
class XmlaOlap4jDriverVersion {
    static final String NAME = "olap4j driver for XML/A";
    static final String VERSION = "${project.revision}";
    static final int MAJOR_VERSION = Integer.valueOf("${project.revision.major}");
    static final int MINOR_VERSION = Integer.valueOf("${project.revision.minor}");
}

// End XmlaOlap4jDriverVersion.java</echo>
    </target>

    <target name="define-tasks"/>

    <target name="parser" depends="resolve,define-tasks">
        <javacc
            target="${src.dir}/org/olap4j/mdx/parser/impl/MdxParser.jj"
            javacchome="${lib.dir}"/>
    </target>

    <target name="clean-tests" depends="subfloor.clean-tests">
        <antcall target="init-hsql"/>
    </target>

    <target name="clean-hsql">
        <delete includeemptydirs="false">
            <fileset
                dir="${basedir}/foodmart"
                defaultexcludes="true">
                <exclude name="foodmart.zip"/>
                <exclude name="FoodMart.xml"/>
            </fileset>
        </delete>
    </target>

    <target name="init-hsql" depends="clean-hsql">
        <unzip src="${basedir}/foodmart/foodmart.zip" dest="${basedir}/foodmart/"
            overwrite="false" />
    </target>

    <target name="init-tests" depends="clean-tests">
        <mkdir dir="${testclasses.dir}" />
        <mkdir dir="${testsrc.dir}" />
        <antcall target="init-hsql"/>
    </target>

    <!-- Override of subfloor to resolve modules artifacts -->
    <target name="resolve" depends="install-ivy,install-antcontrib">

        <antcall target="subfloor.resolve"/>

        <ivy:resolve file="ivy.xml" conf="codegen" />
        <ivy:retrieve conf="codegen" pattern="${testlib.dir}/[module](-[classifier]).[ext]" />

        <ivy:resolve file="ivy-jdk14.xml" conf="default" />
        <ivy:deliver conf="default" deliverpattern="${bin.dir}/ivy-jdk14.xml" />
        <ivy:retrieve conf="default" pattern="${lib.dir}/[module](-[classifier]).[ext]" />

        <ivy:resolve file="ivy-xmla.xml" conf="default" />
        <ivy:deliver conf="default,default.transitive" deliverpattern="${bin.dir}/ivy-xmla.xml" />
        <replace token="default.transitive" value="default" file="${bin.dir}/ivy-xmla.xml"/>
        <ivy:retrieve conf="default" pattern="${lib.dir}/[module](-[classifier]).[ext]" />

        <ivy:resolve file="ivy-tck.xml" conf="test" />
        <ivy:deliver conf="test,test.transitive" deliverpattern="${bin.dir}/ivy-tck.xml" />
    	<replace token="test.transitive" value="test" file="${bin.dir}/ivy-tck.xml"/>
        <ivy:retrieve conf="test" pattern="${testlib.dir}/[module](-[classifier]).[ext]" />

        <ivy:resolve file="ivy.xml" conf="default" />
        <ivy:deliver conf="default" deliverpattern="${dist.dir}/ivy.xml" />

    </target>

    <!-- Override from subfloor so we generate a pom per module. -->
    <target name="create-pom" depends="install-ivy,ivy.deliver">
        <ivy:makepom ivyfile="${dist.dir}/ivy.xml" pomfile="${dist.dir}/pom.xml">
          <mapping conf="default" scope="compile" />
          <mapping conf="test" scope="test" />
          <mapping conf="codegen" scope="test" />
        </ivy:makepom>
        <ivy:makepom ivyfile="${bin.dir}/ivy-tck.xml" pomfile="${bin.dir}/${ivy.artifact.id}-tck.pom">
            <mapping conf="default" scope="test"/>
            <mapping conf="test" scope="test"/>
            <mapping conf="test.transitive" scope="test"/>
        </ivy:makepom>
        <ivy:makepom ivyfile="${bin.dir}/ivy-jdk14.xml" pomfile="${bin.dir}/${ivy.artifact.id}-jdk14.pom">
            <mapping conf="default" scope="compile"/>
        </ivy:makepom>
        <ivy:makepom ivyfile="${bin.dir}/ivy-xmla.xml" pomfile="${bin.dir}/${ivy.artifact.id}-xmla.pom">
            <mapping conf="default" scope="compile"/>
            <mapping conf="default.transitive" scope="compile"/>
        </ivy:makepom>
    </target>
    <target name="ivy.deliver">
        <!-- Purposely left empty. Exportable Ivy files are generated when resolving. -->
    </target>

    <target name="apologise" unless="java.version.matches.requested">
      <echo>Actual JVM Version (${java.runtime.version}) does not match
requested (${requested.java.version}); skipping compile for this JDK.
If you wish to build for this JDK, modify ${unix.script}.
      </echo>
    </target>

    <!-- override compile task to account for special jdk handling -->
    <target name="compile.compile" depends="apologise" if="java.version.matches.requested">
        <javac destdir="${classes.dir}" debug="${javac.debug}"
            deprecation="${javac.deprecation}" fork="true">
            <classpath>
                <path refid="classpath" />
            </classpath>
            <src path="${src.dir}" />
            <exclude name="org/olap4j/driver/xmla/FactoryJdbc3Impl.java"
                if="jdk15.not.present" />
            <exclude name="org/olap4j/driver/xmla/FactoryJdbc4Impl.java"
                if="jdk16.not.present" />
            <exclude name="org/olap4j/driver/xmla/FactoryJdbc4Plus.java"
                if="jdk16.not.present" />
            <exclude name="org/olap4j/driver/xmla/FactoryJdbc41Impl.java"
                if="jdk17.not.present" />
        </javac>
    </target>

    <target name="compile.pre" depends="parser">
    </target>

    <target name="compile.post">
        <copy todir="${classes.dir}">
            <fileset dir="${src.dir}">
                <include name="META-INF/**" />
            </fileset>
        </copy>
    </target>

    <!-- create a retrowoven jar file which will work under jdk1.4 -->
    <target name="jar-jdk14">
        <copy todir="${classes-jdk14.dir}">
            <fileset dir="${classes.dir}"
                includes="**/*"/>
        </copy>
        <antcall target="retroweave"/>
        <zip zipfile="${jar-jdk14.file}" update="true">
            <zipfileset dir="${classes-jdk14.dir}"
                includes="
**/*.class,
**/*.properties,
**/*.xml"/>
        </zip>
        <delete includeemptydirs="true">
            <fileset dir="${classes-jdk14.dir}" includes="**/*"/>
        </delete>
    </target>

    <target name="retroweave">
        <taskdef name="retroweaver" classname="com.rc.retroweaver.ant.RetroWeaverTask">
            <classpath>
                <pathelement location="${lib.dir}/asm.jar" />
                <pathelement location="${lib.dir}/asm-commons.jar" />
                <pathelement location="${lib.dir}/retroweaver.jar" />
                <pathelement location="${lib.dir}/retroweaver-rt.jar" />
            </classpath>
        </taskdef>
        <retroweaver srcdir="${classes-jdk14.dir}" />
    </target>

    <!--
        override to prevent resources in src dir from being copied to classes
        and included in jar
    -->
    <target name="compile.res_copy" depends="install-antcontrib">
        <if>
            <available file="${res.dir}" />
            <then>
                <copy todir="${classes.dir}">
                    <fileset dir="${res.dir}" />
                </copy>
            </then>
        </if>
    </target>

    <!-- override from subfloor to publish tck and xmla artifacts as well -->
    <target name="publish-nojar">
        <sequential>
            <antcall target="subfloor.publish-nojar"/>

            <!-- Publish -->
            <antcall target="maven-publish-dependencies">
                <param name="publish.groupId" value="${ivy.artifact.group}" />
                <param name="publish.artifactId" value="${ivy.artifact.id}-tck" />
                <param name="publish.version" value="${project.revision}" />
                <param name="publish.file" value="${bin.dir}/ivy-tck.xml" />
            </antcall>
            <antcall target="maven-publish-artifact">
              <param name="publish.pomFile" value="${bin.dir}/${ivy.artifact.id}-tck.pom" />
              <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-tck-${project.revision}.jar" />
            </antcall>

            <antcall target="maven-publish-dependencies">
                <param name="publish.groupId" value="${ivy.artifact.group}" />
                <param name="publish.artifactId" value="${ivy.artifact.id}-xmla" />
                <param name="publish.version" value="${project.revision}" />
                <param name="publish.file" value="${bin.dir}/ivy-xmla.xml" />
            </antcall>
            <antcall target="maven-publish-artifact">
              <param name="publish.pomFile" value="${bin.dir}/${ivy.artifact.id}-xmla.pom" />
              <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-xmla-${project.revision}.jar" />
            </antcall>

            <antcall target="maven-publish-dependencies">
                <param name="publish.groupId" value="${ivy.artifact.group}" />
                <param name="publish.artifactId" value="${ivy.artifact.id}-jdk14" />
                <param name="publish.version" value="${project.revision}" />
                <param name="publish.file" value="${bin.dir}/ivy-jdk14.xml" />
            </antcall>
            <antcall target="maven-publish-artifact">
              <param name="publish.pomFile" value="${bin.dir}/${ivy.artifact.id}-jdk14.pom" />
              <param name="publish.file" value="${jar-jdk14.file}" />
            </antcall>
        </sequential>
    </target>

    <target name="javadoc" depends="clean-stray-package-html">
        <mkdir dir="${javadoc.dir}" />
        <delete quiet="true" file="${javadoc.dir}/index.html" />
        <javadoc sourcepath="${src.dir}" classpathref="javadoc.classpath"
            destdir="${javadoc.dir}" packagenames="org.olap4j.*"
            excludepackagenames="org.olap4j.impl.*,org.olap4j.mdx.parser.impl.*,org.olap4j.sample.*"
            overview="${src.dir}/overview.html"
            footer="&lt;a href=&quot;http://sourceforge.net/projects/olap4j&quot;&gt;&lt;img src=&quot;http://sourceforge.net/sflogo.php?group_id=168953&#38;type=1&quot; width=&quot;88&quot; height=&quot;31&quot; border=&quot;0&quot; alt=&quot;SourceForge.net_Logo&quot;&gt;&lt;/a&gt;"
            author="true" source="1.5" access="public"
            Windowtitle="olap4j, version ${project.revision}" additionalparam="-linksource">
            <tag name="pre" description="Pre-condition:" scope="constructors,methods" />
            <tag name="post" description="Post-condition:" scope="constructors,methods" />
            <tag name="testcase" description="Test-case:" scope="constructors,methods,types" />
            <link href="http://download.oracle.com/javase/7/docs/api/" />
        </javadoc>
    </target>

    <!--
        Strict javadoc for testing purposes. Includes all packages and
        non-public classes and methods.
    -->
    <target name="javadoc-strict" depends="clean-stray-package-html">
        <mkdir dir="${javadoc.dir}" />
        <delete quiet="true" file="${javadoc.dir}/index.html" />
        <javadoc sourcepath="${src.dir}:${testsrc.dir}" classpathref="test.classpath"
            destdir="${javadoc.dir}" packagenames="org.olap4j.*" overview="${src.dir}/overview.html"
            footer="&lt;a href=&quot;http://sourceforge.net/projects/olap4j&quot;&gt;&lt;img src=&quot;http://sourceforge.net/sflogo.php?group_id=168953&#38;type=1&quot; width=&quot;88&quot; height=&quot;31&quot; border=&quot;0&quot; alt=&quot;SourceForge.net_Logo&quot;&gt;&lt;/a&gt;"
            author="true" source="1.5" access="private"
            Windowtitle="olap4j, version ${project.revision}">
            <tag name="pre" description="Pre-condition:" scope="constructors,methods" />
            <tag name="post" description="Post-condition:" scope="constructors,methods" />
            <tag name="testcase" description="Test-case:" scope="constructors,methods,types" />
            <link href="http://download.oracle.com/javase/7/docs/api/" />
        </javadoc>
    </target>

    <!--
        Generate javadoc with embedded UML diagrams using the yDoc doclet from
        yWorks.com. Set ydoc.home in build.properties, then replace
        ${ydoc.home}/resources/ydoc.license with a full license (free for open
        source use).
    -->
    <target name="javadoc-with-ydoc" depends="clean-stray-package-html">
        <mkdir dir="${javadoc.dir}" />
        <delete quiet="true" file="${javadoc.dir}/index.html" />
        <property name="ps" value="${path.separator}" />
        <javadoc sourcepath="${src.dir}" classpathref="javadoc.classpath"
            destdir="${javadoc.dir}" packagenames="org.olap4j.*"
            excludepackagenames="org.olap4j.impl.*,org.olap4j.mdx.parser.impl.*,org.olap4j.sample.*"
            overview="${src.dir}/overview.html"
            footer="&lt;a href=&quot;http://sourceforge.net/projects/olap4j&quot;&gt;&lt;img src=&quot;http://sourceforge.net/sflogo.php?group_id=168953&#38;type=1&quot; width=&quot;88&quot; height=&quot;31&quot; border=&quot;0&quot; alt=&quot;SourceForge.net_Logo&quot;&gt;&lt;/a&gt;"
            author="true" source="1.5" access="public"
            Windowtitle="olap4j, version ${project.revision}" additionalparam="-linksource">
            <tag name="pre" description="Pre-condition:" scope="constructors,methods" />
            <tag name="post" description="Post-condition:" scope="constructors,methods" />
            <tag name="testcase" description="Test-case:" scope="constructors,methods,types" />
            <link href="http://download.oracle.com/javase/7/docs/api/" />
            <link href="http://junit.sourceforge.net/javadoc/" />
            <doclet name="ydoc.doclets.YStandard"
                path="${ydoc.home}/lib/ydoc.jar${ps}${ydoc.home}/lib/class2svg.jar${ps}${ydoc.home}/resources${ps}${ydoc.home}/doc">
                <param name="-author" />
                <param name="-generic" />
                <param name="-umlautogen" />
                <param name="-tag" value="y.precondition" />
                <param name="-tag" value="y.postcondition" />
                <param name="-tag" value="y.complexity" />
                <param name="-tag" value="param" />
                <param name="-tag" value="return" />
                <param name="-tag" value="see" />
                <param name="-tag" value="y.uml" />
            </doclet>
        </javadoc>
    </target>

    <target name="javadoc-pdf" depends="clean-stray-package-html">
        <javadoc sourcepath="${src.dir}" classpathref="javadoc.classpath"
            packagenames="org.olap4j.*"
            excludepackagenames="org.olap4j.impl.*,org.olap4j.mdx.parser.impl.*,org.olap4j.sample.*"
            overview="${src.dir}/overview.html" author="true" source="1.5"
            access="public">
            <doclet name="com.tarsec.javadoc.pdfdoclet.PDFDoclet" path="${testlib.dir}/pdfdoclet.jar">
                <param name="-pdf" value="${basedir}/doc/olap4j_api.pdf" />
                <param name="-config" value="${basedir}/doc/pdfdoclet.properties" />
            </doclet>
        </javadoc>
    </target>

    <target name="clean-stray-package-html"
            description="remove stray package.html files under classes to avoid
                    'multiple sources of package comments' errors">
        <delete includeEmptyDirs="false" quiet="true">
            <fileset dir="${classes.dir}" includes="**/package.html" />
            <fileset dir="${testclasses.dir}" includes="**/package.html" />
        </delete>
    </target>

    <target name="publish-local-xmla" depends="install-ivy">
        <ivy:resolve file="${ivy.artifact.ivyfilename.xmla}" />
        <ivy:publish resolver="local" pubrevision="${project.revision}" overwrite="true" forcedeliver="true">
            <artifacts pattern="${dist.dir}/[artifact]-[revision](-[classifier]).[ext]" />
        </ivy:publish>
    </target>

    <target name="publish-local-tck" depends="install-ivy">
        <ivy:resolve file="${ivy.artifact.ivyfilename.tck}" />
        <ivy:publish resolver="local" pubrevision="${project.revision}" overwrite="true" forcedeliver="true">
            <artifacts pattern="${dist.dir}/[artifact]-[revision](-[classifier]).[ext]" />
        </ivy:publish>
    </target>

    <target name="publish-local"
          depends="dist, dist-source, publish-local-nojar, publish-local-tck, publish-local-xmla"
          description="Builds and publishes the jar file to the local repository" />

</project>

<!-- End build.xml -->
